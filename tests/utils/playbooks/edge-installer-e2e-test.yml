---
- name: Run edge-installer E2E test
  hosts: test
  gather_facts: true

  tasks:
    - name: Init config - phase 1
      ansible.builtin.set_fact:  # noqa: run-once[task]
        image_name: "image-test-{{ lookup('ansible.builtin.password', '/dev/null', chars='ascii_lowercase', length=16) }}"
        libvirt_directory: "/var/lib/libvirt"
        builder_compose_type: edge-installer
      run_once: true

    - name: Init config - phase 2
      ansible.builtin.set_fact:  # noqa: run-once[task]
        builder_blueprint_name: "{{ image_name }}"
        builder_blueprint_src_path: "/tmp/blueprint_{{ image_name }}.toml"
        builder_blueprint_ref: "rhel/8/x86_64/edge"
        builder_blueprint_distro_lower: "rhel"
        builder_image_storage_cleared: true

        libvirt_image_directory: "{{ libvirt_directory }}/images"
        download_directory: "/tmp/"

        base_image_name: "{{ image_name }}_{{ builder_compose_type }}.iso"
        base_image_url: "http://osbuild_builder/{{ image_name }}/images/0.0.1/{{ image_name }}_{{ builder_compose_type }}.iso"

        vm_name: "vm-test-{{ lookup('ansible.builtin.password', '/dev/null', chars='ascii_lowercase', length=16) }}"
        vm_vcpus: 2
        vm_ram_mb: 2048
        vm_disk: 20
        vm_net: default

        packages:
          - "vim-enhanced"
          - "git==2.*"
          - "ansible-core"
      run_once: true

    - name: E2E test
      block:
        - name: Load IP from osbuild builder host
          ansible.builtin.setup:
            filter: ansible_default_ipv4
          delegate_to: osbuild_builder

        - name: Build edge-installer image
          ansible.builtin.import_role:
            name: infra.osbuild.builder
          delegate_to: osbuild_builder
          become: true

        - name: Create VM with the image built
          block:
            - name: Install required packages
              ansible.builtin.package:
                name:
                  - libvirt-devel
                  - libguestfs-tools
                  - python3-libvirt
                state: present
              become: true

            - name: Download base image
              ansible.builtin.get_url:
                url: "{{ base_image_url }}"
                dest: "{{ download_directory }}{{ base_image_name }}"
                mode: "0660"
                force: true

            - name: Copy base image to libvirt directory
              ansible.builtin.copy:
                dest: "{{ libvirt_image_directory }}/{{ base_image_name }}"
                src: "{{ download_directory }}{{ base_image_name }}"
                force: true
                remote_src: true
                mode: "0660"
              register: copy_results

            - name: Create VM Disk
              ansible.builtin.command:
                cmd: "qemu-img create
                  -f qcow2
                  {{ libvirt_image_directory }}/{{ vm_name }}.qcow2 {{ vm_disk }}G"
                creates: "{{ libvirt_image_directory }}/{{ vm_name }}.qcow2"
              become: true

            - name: Create VM file
              ansible.builtin.template:
                src: "vm-template.xml.j2"
                dest: "{{ libvirt_image_directory }}/{{ vm_name }}.xml"
                mode: "0660"

            - name: Define VM
              ansible.builtin.command:
                argv:
                  - "virsh"
                  - "define"
                  - "{{ libvirt_image_directory }}/{{ vm_name }}.xml"
              register: virsh_define_results
              changed_when: virsh_define_results.rc != 0
              become: true

            - name: Start VM
              ansible.builtin.command:
                argv:
                  - "virsh"
                  - "start"
                  - "{{ vm_name }}"
              register: virsh_start_results
              changed_when: virsh_start_results.rc != 0
              become: true

            - name: Wait for VM to start
              ansible.builtin.command:
                argv:
                  - "virsh"
                  - "list"
                  - "--state-running"
              register: virsh_list_results
              changed_when: virsh_list_results.rc != 0
              until: vm_name in virsh_start_results.stdout
              retries: 5
              delay: 2
              become: true

            - name: Wait for VM to have an IP
              ansible.builtin.shell: set -o pipefail && virsh domifaddr {{ vm_name }} | awk 'NR==3 {split($4, array, "/") ; print array[1]}'
              register: vm_ip
              until: vm_ip is regex("[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}")
              retries: 80
              delay: 2
              become: true
              changed_when: false

            - name: Wait for VM to accept connections
              ansible.builtin.wait_for_connection:
                delay: 2
                timeout: 120
              delegate_to: "{{ vm_ip.stdout }}"
              remote_user: core

        - name: Get packages installed
          ansible.builtin.shell: rpm -q {{ packages | join(' ') }} --qf "%{NAME}\n"  # noqa: command-instead-of-module
          register: package_installed
          changed_when: false
          delegate_to: "{{ vm_ip.stdout }}"
          remote_user: core

        - name: Assert packages installed
          ansible.builtin.assert:
            that:
              - item in package_installed.stdout_lines
          loop: "{{ packages | map('ansible.builtin.regex_replace', '==.*', '') }}"

      always:
        - name: Cleanup test environment
          ansible.builtin.include_tasks:
            file: tasks/cleanup-test-env.yml
